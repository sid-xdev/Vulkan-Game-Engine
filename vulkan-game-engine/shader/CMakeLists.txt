set( NX_GLSL_SHADER_DIR "${CMAKE_SOURCE_DIR}/build-data/shaders" CACHE PATH "GLSL shader files directory" )
set( NX_GLSL_LANGUAGE_VALIDATOR "$ENV{VULKAN_SDK}/Bin" CACHE PATH "glslangValidator file path" )

message( STATUS "${NX_GLSL_LANGUAGE_VALIDATOR}"  )
message( STATUS "${NX_GLSL_SHADER_DIR}"  )

set( NX_FRAGMENT_SHADER_FILES
		"deferred_geometry.frag"
		"edge_detection.frag"
		"finalize.frag"
		"glyph_contour_2D.frag"
		"glyph_contour_3D.frag"
		"label.frag"
		"single_shading.frag"
		"multi_shading.frag"
		"normal.frag" )
		
set( NX_VERTEX_SHADER_FILES
		"deferred_geometry.vert"
		"glyph_quad_2D.vert"
		"glyph_quad_3D.vert"
		"label.vert"
		"full_screen.vert"
		"normal.vert" )
		
set( NX_COMPUTE_SHADER_FILES )

list(LENGTH NX_VERTEX_SHADER_FILES NX_VERTEX_SHADER_COUNT )
list(LENGTH NX_FRAGMENT_SHADER_FILES NX_FRAGMENT_SHADER_COUNT )
list(LENGTH NX_COMPUTE_SHADER_FILES NX_COMPUTE_SHADER_COUNT )

if( NOT EXISTS ${NX_GLSL_LANGUAGE_VALIDATOR} )
	message( STATUS "Compile time resources are missing!" )
endif()

#generate vertex shaders
foreach( NX_VERTEX_SHADER_FILE ${NX_VERTEX_SHADER_FILES} )

	get_filename_component( NX_VERTEX_SHADER_SHORT_NAME ${NX_VERTEX_SHADER_FILE} NAME_WE )

	set( NX_VERTEX_SHADER_LONG_NAME "vertex_shader_${NX_VERTEX_SHADER_SHORT_NAME}" )
	set( NX_VERTEX_SHADER_HEADER_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${NX_VERTEX_SHADER_LONG_NAME}.hpp" )
	
	add_custom_command( 
		OUTPUT 	${NX_VERTEX_SHADER_HEADER_PATH}
		COMMAND ${NX_GLSL_LANGUAGE_VALIDATOR}/glslangValidator --target-env vulkan1.1 --vn "${NX_VERTEX_SHADER_LONG_NAME}" -g2 -o "${NX_VERTEX_SHADER_HEADER_PATH}" "${NX_VERTEX_SHADER_FILE}"
		DEPENDS "${NX_GLSL_SHADER_DIR}/${NX_VERTEX_SHADER_FILE}"
		WORKING_DIRECTORY ${NX_GLSL_SHADER_DIR}
	)
	string(TOUPPER ${NX_VERTEX_SHADER_SHORT_NAME} NX_VERTEX_SHADER_SHORT_NAME)
	set( NX_VERTEX_SHADER_SHORT_NAMES ${NX_VERTEX_SHADER_SHORT_NAMES} ${NX_VERTEX_SHADER_SHORT_NAME} )
	set( NX_SHADER_HEADER_FILES ${NX_SHADER_HEADER_FILES} ${NX_VERTEX_SHADER_HEADER_PATH} )
	set( NX_SHADER_INCLUDES ${NX_SHADER_INCLUDES} "${NX_VERTEX_SHADER_LONG_NAME}.hpp" )
endforeach()

#generate fragment shaders
foreach( NX_FRAGMENT_SHADER_FILE ${NX_FRAGMENT_SHADER_FILES} )

	get_filename_component( NX_FRAGMENT_SHADER_SHORT_NAME ${NX_FRAGMENT_SHADER_FILE} NAME_WE )

	set( NX_FRAGMENT_SHADER_LONG_NAME "fragment_shader_${NX_FRAGMENT_SHADER_SHORT_NAME}" )
	set( NX_FRAGMENT_SHADER_HEADER_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${NX_FRAGMENT_SHADER_LONG_NAME}.hpp" )
	
	add_custom_command( 
		OUTPUT 	${NX_FRAGMENT_SHADER_HEADER_PATH}
		COMMAND ${NX_GLSL_LANGUAGE_VALIDATOR}/glslangValidator --target-env vulkan1.1 --vn "${NX_FRAGMENT_SHADER_LONG_NAME}" -g2 -o "${NX_FRAGMENT_SHADER_HEADER_PATH}" "${NX_FRAGMENT_SHADER_FILE}"
		DEPENDS "${NX_GLSL_SHADER_DIR}/${NX_FRAGMENT_SHADER_FILE}"
		WORKING_DIRECTORY ${NX_GLSL_SHADER_DIR}
	)
	string( TOUPPER ${NX_FRAGMENT_SHADER_SHORT_NAME} NX_FRAGMENT_SHADER_SHORT_NAME )
	set( NX_FRAGMENT_SHADER_SHORT_NAMES ${NX_FRAGMENT_SHADER_SHORT_NAMES} ${NX_FRAGMENT_SHADER_SHORT_NAME} )
	set( NX_SHADER_HEADER_FILES ${NX_SHADER_HEADER_FILES} ${NX_FRAGMENT_SHADER_HEADER_PATH} )
	set( NX_SHADER_INCLUDES ${NX_SHADER_INCLUDES} "${NX_FRAGMENT_SHADER_LONG_NAME}.hpp" )
endforeach()

#generate compute shaders
foreach( NX_COMPUTE_SHADER_FILE ${NX_COMPUTE_SHADER_FILES} )

	get_filename_component( NX_COMPUTE_SHADER_SHORT_NAME ${NX_COMPUTE_SHADER_FILE} NAME_WE )

	set( NX_COMPUTE_SHADER_LONG_NAME "vertex_shader_${NX_COMPUTE_SHADER_SHORT_NAME}" )
	set( NX_COMPUTE_SHADER_HEADER_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${NX_COMPUTE_SHADER_LONG_NAME}.hpp" )
	
	add_custom_command( 
		OUTPUT 	${NX_COMPUTE_SHADER_HEADER_PATH}
		COMMAND ${NX_GLSL_LANGUAGE_VALIDATOR}/glslangValidator --target-env vulkan1.1 --vn "${NX_COMPUTE_SHADER_LONG_NAME}" -g2 -o "${NX_COMPUTE_SHADER_HEADER_PATH}" "${NX_COMPUTE_SHADER_FILE}"
		DEPENDS "${NX_GLSL_SHADER_DIR}/${NX_COMPUTE_SHADER_FILE}"
		WORKING_DIRECTORY ${NX_GLSL_SHADER_DIR}
	)
	string( TOUPPER ${NX_COMPUTE_SHADER_SHORT_NAME} NX_COMPUTE_SHADER_SHORT_NAME )
	set( NX_COMPUTE_SHADER_SHORT_NAMES ${NX_COMPUTE_SHADER_SHORT_NAMES} ${NX_COMPUTE_SHADER_SHORT_NAME} )
	set( NX_SHADER_HEADER_FILES ${NX_SHADER_HEADER_FILES} ${NX_COMPUTE_SHADER_HEADER_PATH} )
	set( NX_SHADER_INCLUDES ${NX_SHADER_INCLUDES} "${NX_COMPUTE_SHADER_LONG_NAME}.hpp" )
endforeach()

STRING( REPLACE ";" "$<SEMICOLON>" NX_SHADER_INCLUDES "${NX_SHADER_INCLUDES}" )
STRING( REPLACE ";" "$<SEMICOLON>" NX_VERTEX_SHADER_SHORT_NAMES "${NX_VERTEX_SHADER_SHORT_NAMES}" )
STRING( REPLACE ";" "$<SEMICOLON>" NX_FRAGMENT_SHADER_SHORT_NAMES "${NX_FRAGMENT_SHADER_SHORT_NAMES}" )
STRING( REPLACE ";" "$<SEMICOLON>" NX_COMPUTE_SHADER_SHORT_NAMES "${NX_COMPUTE_SHADER_SHORT_NAMES}")

add_custom_target( shaders
	DEPENDS ${NX_SHADER_HEADER_FILES}
	COMMAND ${CMAKE_COMMAND} 
		"-DINPUT_FILE=${NX_GLSL_SHADER_DIR}/configure_shader.in" 
		"-DOUTPUT_FILE=${CMAKE_CURRENT_SOURCE_DIR}/shader.hpp"
		
		-D NX_SHADER_INCLUDES=${NX_SHADER_INCLUDES}

		-D NX_VERTEX_SHADER_ENUMS=${NX_VERTEX_SHADER_SHORT_NAMES}
		-D NX_FRAGMENT_SHADER_ENUMS=${NX_FRAGMENT_SHADER_SHORT_NAMES}
		-D NX_COMPUTE_SHADER_ENUMS=${NX_COMPUTE_SHADER_SHORT_NAMES}

		-D FRAGMENT_SHADER_COUNT=${NX_FRAGMENT_SHADER_COUNT}
		-D VERTEX_SHADER_COUNT=${NX_VERTEX_SHADER_COUNT}
		-D COMPUTE_SHADER_COUNT=${NX_COMPUTE_SHADER_COUNT}
		
		-P "${CMAKE_CURRENT_SOURCE_DIR}/create_shader.cmake"
)

add_dependencies( logiclib shaders )
add_dependencies( renderlib shaders )
