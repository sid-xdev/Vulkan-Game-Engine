cmake_minimum_required(  VERSION 3.13.0 )

#find all shader files
file( GLOB NX_FRAGMENT_SHADER_FILES LIST_DIRECTORIES false RELATIVE ${NX_GLSL_SHADER_DIR} CONFIGURE_DEPENDS "${NX_GLSL_SHADER_DIR}/*.frag" )
file( GLOB NX_VERTEX_SHADER_FILES LIST_DIRECTORIES false RELATIVE ${NX_GLSL_SHADER_DIR} CONFIGURE_DEPENDS "${NX_GLSL_SHADER_DIR}/*.vert" )
file( GLOB NX_COMPUTE_SHADER_FILES LIST_DIRECTORIES false RELATIVE ${NX_GLSL_SHADER_DIR} CONFIGURE_DEPENDS "${NX_GLSL_SHADER_DIR}/*.compute" )

list(LENGTH NX_VERTEX_SHADER_FILES NX_VERTEX_SHADER_COUNT )
list(LENGTH NX_FRAGMENT_SHADER_FILES NX_FRAGMENT_SHADER_COUNT )
list(LENGTH NX_COMPUTE_SHADER_FILES NX_COMPUTE_SHADER_COUNT )

#generate vertex shaders
foreach( NX_VERTEX_SHADER_FILE ${NX_VERTEX_SHADER_FILES} )

	get_filename_component( NX_VERTEX_SHADER_SHORT_NAME ${NX_VERTEX_SHADER_FILE} NAME_WE )

	set( NX_VERTEX_SHADER_LONG_NAME "vertex_shader_${NX_VERTEX_SHADER_SHORT_NAME}" )
	set( NX_VERTEX_SHADER_HEADER_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${NX_VERTEX_SHADER_LONG_NAME}.hpp" )
	
	add_custom_command( 
		OUTPUT 	${NX_VERTEX_SHADER_HEADER_PATH}
		COMMAND ${NX_GLSL_LANGUAGE_VALIDATOR} --target-env vulkan1.1 --vn "${NX_VERTEX_SHADER_LONG_NAME}" -g2 -o "${NX_VERTEX_SHADER_HEADER_PATH}" "${NX_VERTEX_SHADER_FILE}"
		DEPENDS "${NX_GLSL_SHADER_DIR}/${NX_VERTEX_SHADER_FILE}"
		WORKING_DIRECTORY ${NX_GLSL_SHADER_DIR}
	)
	set( NX_VERTEX_SHADER_SHORT_NAMES ${NX_VERTEX_SHADER_SHORT_NAMES} ${NX_VERTEX_SHADER_SHORT_NAME})
	set( NX_SHADER_HEADER_FILES ${NX_SHADER_HEADER_FILES} ${NX_VERTEX_SHADER_HEADER_PATH} )
endforeach()

#generate fragment shaders
foreach( NX_FRAGMENT_SHADER_FILE ${NX_FRAGMENT_SHADER_FILES} )

	get_filename_component( NX_FRAGMENT_SHADER_SHORT_NAME ${NX_FRAGMENT_SHADER_FILE} NAME_WE )

	set( NX_FRAGMENT_SHADER_LONG_NAME "fragment_shader_${NX_FRAGMENT_SHADER_SHORT_NAME}" )
	set( NX_FRAGMENT_SHADER_HEADER_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${NX_FRAGMENT_SHADER_LONG_NAME}.hpp" )
	
	add_custom_command( 
		OUTPUT 	${NX_FRAGMENT_SHADER_HEADER_PATH}
		COMMAND ${NX_GLSL_LANGUAGE_VALIDATOR} --target-env vulkan1.1 --vn "${NX_FRAGMENT_SHADER_LONG_NAME}" -g2 -o "${NX_FRAGMENT_SHADER_HEADER_PATH}" "${NX_FRAGMENT_SHADER_FILE}"
		DEPENDS "${NX_GLSL_SHADER_DIR}/${NX_FRAGMENT_SHADER_FILE}"
		WORKING_DIRECTORY ${NX_GLSL_SHADER_DIR}
	)
	set( NX_FRAGMENT_SHADER_SHORT_NAMES ${NX_FRAGMENT_SHADER_SHORT_NAMES} ${NX_FRAGMENT_SHADER_SHORT_NAME})
	set( NX_SHADER_HEADER_FILES ${NX_SHADER_HEADER_FILES} ${NX_FRAGMENT_SHADER_HEADER_PATH} )
endforeach()

#generate compute shaders
foreach( NX_COMPUTE_SHADER_FILE ${NX_COMPUTE_SHADER_FILES} )

	get_filename_component( NX_COMPUTE_SHADER_SHORT_NAME ${NX_COMPUTE_SHADER_FILE} NAME_WE )

	set( NX_COMPUTE_SHADER_LONG_NAME "vertex_shader_${NX_COMPUTE_SHADER_SHORT_NAME}" )
	set( NX_COMPUTE_SHADER_HEADER_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${NX_COMPUTE_SHADER_LONG_NAME}.hpp" )
	
	add_custom_command( 
		OUTPUT 	${NX_COMPUTE_SHADER_HEADER_PATH}
		COMMAND ${NX_GLSL_LANGUAGE_VALIDATOR} --target-env vulkan1.1 --vn "${NX_COMPUTE_SHADER_LONG_NAME}" -g2 -o "${NX_COMPUTE_SHADER_HEADER_PATH}" "${NX_COMPUTE_SHADER_FILE}"
		DEPENDS "${NX_GLSL_SHADER_DIR}/${NX_COMPUTE_SHADER_FILES}"
		WORKING_DIRECTORY ${NX_GLSL_SHADER_DIR}
	)
	set( NX_COMPUTE_SHADER_SHORT_NAMES ${NX_COMPUTE_SHADER_SHORT_NAMES} ${NX_COMPUTE_SHADER_SHORT_NAME})
	set( NX_SHADER_HEADER_FILES ${NX_SHADER_HEADER_FILES} ${NX_COMPUTE_SHADER_HEADER_PATH} )
endforeach()

#write master shaders.hpp
file( WRITE shader.hpp "#pragma once\n#include <Defines.hpp>\n" )

foreach( NX_SHADER_HEADER_FILE ${NX_SHADER_HEADER_FILES} )
	get_filename_component( NX_SHADER_HEADER ${NX_SHADER_HEADER_FILE} NAME )
	file( APPEND shader.hpp "#include \"${NX_SHADER_HEADER}\"\n" )
endforeach()

file( APPEND shader.hpp "namespace noxcain\n{\n" )

#vertex enum class
file( APPEND shader.hpp "\nenum class VertexShaderIds\n{\n" )

foreach( NX_VERTEX_SHADER_SHORT_NAME ${NX_VERTEX_SHADER_SHORT_NAMES} )
	string(TOUPPER ${NX_VERTEX_SHADER_SHORT_NAME} NX_VERTEX_SHADER_SHORT_NAME)
	file( APPEND shader.hpp "\t${NX_VERTEX_SHADER_SHORT_NAME},\n" )
endforeach()

file(APPEND shader.hpp "};\nconstexpr UINT32 VERTEX_SHADER_COUNT = ${NX_VERTEX_SHADER_COUNT};\n" )

#fragment enum class
file( APPEND shader.hpp "\nenum class FragmentShaderIds\n{\n" )

foreach( NX_FRAGMENT_SHADER_SHORT_NAME ${NX_FRAGMENT_SHADER_SHORT_NAMES} )
	string(TOUPPER ${NX_FRAGMENT_SHADER_SHORT_NAME} NX_FRAGMENT_SHADER_SHORT_NAME)
	file( APPEND shader.hpp "\t${NX_FRAGMENT_SHADER_SHORT_NAME},\n" )
endforeach()

file(APPEND shader.hpp "};\nconstexpr UINT32 FRAGMENT_SHADER_COUNT = ${NX_FRAGMENT_SHADER_COUNT};\n" )

#compute enum class
file( APPEND shader.hpp "\nenum class ComputeShaderIds\n{\n" )

foreach( NX_COMPUTE_SHADER_SHORT_NAME ${NX_COMPUTE_SHADER_SHORT_NAMES} )
	string(TOUPPER ${NX_COMPUTE_SHADER_SHORT_NAME} NX_COMPUTE_SHADER_SHORT_NAME)
	file( APPEND shader.hpp "\t${NX_COMPUTE_SHADER_SHORT_NAME},\n" )
endforeach()

file( APPEND shader.hpp "};\nconstexpr UINT32 COMPUTE_SHADER_COUNT = ${NX_COMPUTE_SHADER_COUNT};\n" )


file( APPEND shader.hpp "\n}" )

add_custom_target( shaders ALL DEPENDS ${NX_SHADER_HEADER_FILES} shader.hpp )
add_dependencies( renderlib shaders )

target_sources( renderlib PRIVATE shader.hpp )